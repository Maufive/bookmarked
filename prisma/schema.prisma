generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map(name: "sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")

  accounts  Account[]
  sessions  Session[]
  bookmarks Bookmark[]
  groups    Group[]

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

model Bookmark {
  id          Int      @id @unique @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String?  @db.VarChar(255)
  url         String   @unique @db.VarChar(255)
  groupId     Int?
  group       Group?   @relation(fields: [groupId], references: [id])
  hostname    String   @db.Text
  description String?  @db.Text
  siteName    String?  @db.Text
  image       String?  @db.Text
  icon        String?  @db.Text
  keywords    String?  @db.Text
  User        User?    @relation(fields: [userId], references: [id])
  userId      String?

  @@index([groupId, url])
  @@index([userId])
  @@map(name: "bookmarks")
}

model Group {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  name      String     @db.VarChar(255)
  bookmarks Bookmark[]
  color     String

  User   User?   @relation(fields: [userId], references: [id])
  userId String?

  @@index([userId])
  @@map(name: "groups")
}
